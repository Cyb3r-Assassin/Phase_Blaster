#!/bin/bash

fixallthethings() #Set permissions and clean up
{
	ID="$(echo $USER)"
	echo -e "\n" #Improve readability
	if [ -d nmap ]; then
		echo "Setting permissions back to user"
		sudo chown -R $ID:$ID nmap
		echo "Doing clean up"
		[[ -e nmap/all_hosts/msf/.nmap ]] && rm nmap/all_hosts/msf/.nmap
		#[[ -e nmap/all_hosts/msf/.gnmap ]] && rm nmap/all_hosts/msf/.gnmap
	fi
	exit 0
}

trap fixallthethings INT HUP;

build_dir()
{
	[[ ! -d nmap ]] && mkdir nmap
	[[ ! -d nmap/all_hosts ]] && mkdir nmap/all_hosts
	[[ ! -e nmap/all_hosts/all_hosts ]] && touch nmap/all_hosts/all_hosts
	[[ ! -d nmap/all_hosts/msf ]] &&  mkdir nmap/all_hosts/msf
}

BtoC() #Convert a class B network to class C
{
	START=0
	END=255
	for (( i=$START; i <= $END ; i++)); do
		if [[ $(expr length $i) -lt 255 ]]; then
			echo "${1}${i}.0/24" >> ips
		fi
	done
}

phase_parse() #Show the IP of host and only open services and ports for it.
{
	while IFS=$'\n' read -r line; do
		host0=$(echo "$line" | grep -e report | awk -F'for ' '{print $2}')
		host1=$(echo "$line" | grep -e [0-9]/ | grep open)
		[[ -n "$host0" ]] && echo -e "\n${BLD_RED}${host0}${TXT_RST}"; host0=""
		[[ -z "$host0" && -n "$host1" ]] && echo "${BLD_TEA}${host1}${TXT_RST}"
	done < nmap/all_hosts/results
	exit 0
}

nbt()
{
	while read -r line; do
		[[ -n "$line" ]] && sudo nbtscan "$line"
	done < ips #<(grep "/" ips)
}

discovery() #Process string for discovering if whe use file ips or if an ip set was passed as $2 on the CLI
{
	if [[ -z $1 ]]; then
		nmap -sn -iL ips | grep -i report | awk -F"for" '{ print $2 }' | cut -d' ' -f2 >> nmap/all_hosts/all_hosts
	else
		echo -e "scanning $1\n"
		nmap -sn $1 | grep -i report | awk -F"for" '{ print $2 }' | cut -d' ' -f2 >> nmap/all_hosts/all_hosts
	fi
}

nessus()  #Build safe Nessus list
{
	if [[ ! -e nmap/Nessus ]]; then
		while IFS=$'\n' read -r host
		do
			if [[ -z $(grep "$host" exclude) ]]; then #Is this ip in our range off limits?
				echo "$host" >> nmap/Nessus #ip is safe
			else
				echo "Skipping $host"
			fi
		done < nmap/all_hosts/all_hosts
	else
		echo "Nessus ready file already exists!"
	fi
	cat nmap/Nessus
}

screenshots()
{
  if [[ -z $(ls -1 *.png | grep "No") ]]; then #Check if we have any web page screen shots first.
		echo "" >> screenshots.html
		printf "<HTML><BODY><BR>" >> screenshots.html
		ls -1 *.png | awk -F : '{ print $1":"$2"\n<BR><IMG SRC=\""$1"%3A"$2"\" width=400><BR><BR>"}' >> screenshots.html
		printf "</BODY></HTML>" >> screenshots.html
		[[ ! -d screenshots ]] && mkdir screenshots
		[[ -e screenshots.html ]] && mv screenshots.html *.png -t screenshots/
  fi
}

eyewitness()
{
	python2 /usr/bin/EyeWitness --all-protocols -f nmap/all_hosts/msf/ewoks.xml -d Power_of_the_dark-side --no-dns #take right from nmap
	
	echo -e "Scanning for Virtual hosts\n"
	while read line; do
		echo "$line" | python2 /usr/bin/ipsearch -b bing_key | awk '{ print $3 }' >> nmap/all_hosts/vhosts
	done < ips
	echo -e "Your Vhost list is:\n"
	cat nmap/all_hosts/vhosts

	echo "Now running a screen capture on your Vhosts"
	python2 /usr/bin/EyeWitness --all-protocols -f nmap/all_hosts/vhosts -d New_Hope --no-dns #take right from nmap
}

scanallthethings() #Scan from file
{
	if [[ $1 == "-df" || $1 == "-ff" ]]; then
		file="nmap/all_hosts/all_hosts"
		#Verified bug exists in nmap versions >=7.01
		#echo "There is currently a unresolvable bug in nmap on some systems resolving FQDN's. Setting target file back to ips"; file="ips" #work around nmap bug until further notice
		echo "Working... This could be a while."
		#sudo nmap ${NMAP_VAL} -iL $file --excludefile exclude -oA nmap/all_hosts/msf/ --script=default,http-screenshot >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
		sudo nmap ${NMAP_VAL} -iL $file --excludefile exclude -oA nmap/all_hosts/msf/ewoks >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
	elif [[ $1 == "ips" ]]; then
		file="ips"
		echo "Working... This could be a while."
		#sudo nmap ${NMAP_VAL} -iL $file --excludefile exclude -oA nmap/all_hosts/msf/ --script=default,http-screenshot >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
		sudo nmap ${NMAP_VAL} -oA nmap/all_hosts/msf/ewoks -iL $file >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
	else
		file="$1"
		echo "Working... This could be a while."
		#sudo nmap ${NMAP_VAL} $file --excludefile exclude -oA nmap/all_hosts/msf/ --script=default,http-screenshot >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
		sudo nmap ${NMAP_VAL} $file --excludefile exclude -oA nmap/all_hosts/msf/ewoks >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
	fi
	cat nmap/all_hosts/results
}

launch()
{
	[[ ! -e exclude ]] && touch exclude #prevent the following line from returning bits if file exclude does not exist
	[[ $2 == "--nmap" || $1 == "--nmap" ]] && read -p "What nmap variables would you like to scan with? e.g. <-sS -sV> " NMAP_VAL || NMAP_VAL="-A"
	if [[ -z $1 || $1 == "--help" || $1 == "-h" ]]; then
		echo -e "Useage Commands are switch [-u -f -d -ff -df -bc --parse --nbt --nessus ] flag [ --nmap ] [IP]/[CID]\n"
		echo -e "\nUPDATE ME! use -u to update script. Must be done atleast once!!!\n"
		echo "-bc To convert a class B range to a scannable block of C's use option -bc ip (example: ./Phase_Blaster -bc 127.0.)"
		echo -e "-f To scan from a file named ips place all ips, and ip ranges to be scanned in a text file named \"ips\" separated by line breaks (example: ./Phase_Blaster -f)\n"
		echo -e "-df Command -df performs a complete ping sweep, creates a file of all live hosts and then nmap scans each of them\nwhile tallying results into individual files by ip's and creates a msf folder with msf importable .xml results.\n"
		echo -e "-d & -ff Using options -d & -ff are done so by enabling the user the ability of running just a discovery scan with -d and\nthen having the option to go back at a later date and run -ff for a comprehensive scan overview of the -d results.\n"
		echo -e "You may also call Phase_Blaster with a single IP or CID and have them enumerated at any point in the same method -f worked. \n(example: ./Phase_Blaster 127.0.0.0 or ./Phase_Blaster 127.0.0.0/24) or just do a discovery by adding -d"
		echo "Use --nmap as the second argument or the first for direct host scanning to run nmap with custom flags. User is prompted with an input function (exampln: ./Phase_Blaster -df --nmap or ./Phase_Blaster --nmap 127.0.0.0"
		echo "The following commands are used independantly"
                echo "--parse to parse the nmap output into readable format"
		echo "--nbt to run a netbios host discovery against the ips file"
		echo "--nessus to generate an import file of only approved IP addressed from a host discovery for nessus scanning"
		#echo "Use --nikto to run nikto on ports 80,443 for hosts in the safe_ip list. In other words only on hosts that have been validated alive and in scope"
		echo "This script uses nmap scripting. Consider running PhaseBlaster with <-u>"
	elif [[ $1 == "-bc" ]]; then
		BtoC $2
	elif [[ $1 == "-f" ]]; then
		build_dir
		scanallthethings ips
		eyewitness
		#screenshots
	elif [[ $1 == "-d" ]]; then
		if [[ -z $2 && $2 != "--nmap" ]]; then
			build_dir
			discovery
			cat nmap/all_hosts/all_hosts
		elif [[ $2 == "--nmap" ]]; then
			echo "You can't specify --nmap with -d"
			exit 1
		else
			[[ $2 =~ [0-9] ]] && build_dir; discovery $2; cat nmap/all_hosts/all_hosts
		fi
	elif [[ $1 == "-df" || $1 == "-fd"  ]]; then
		build_dir
		discovery
		scanallthethings -df
		eyewitness
		#screenshots
	elif [[ $1 == "-ff" ]]; then
		build_dir
		scanallthethings -ff
		eyewitness
		#screenshots
	elif [[ $1 == "--parse" ]]; then
		phase_parse
	elif [[ $1 == "--nbt" ]]; then
		nbt
	elif [[ $1 == "--nessus" ]]; then
		nessus
	elif [[ $1 == "-u" ]]; then
		#if [[ ! -e /usr/local/bin/wkhtmltoimage-i386 ]]; then
		#	wget http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.11.0_rc1-static-i386.tar.bz2
		#	tar -jxvf wkhtmltoimage-0.11.0_rc1-static-i386.tar.bz2
		#	sudo mv wkhtmltoimage-i386 /usr/local/bin/
		#	rm wkhtmltoimage-0.11.0_rc1-static-i386.tar.bz2
		#fi

		#if [[ -e http-screenshot.nse ]]; then
		#	if [[ -d /usr/share/nmap/scripts ]]; then
		#		sudo mv *.nse /usr/share/nmap/scripts
		#	elif [[ -d /usr/local/share/nmap/scripts ]]; then
		#		sudo mv *.nse /usr/local/share/nmap/scripts
		#	else
		#		echo "Do you have nmap installed?"
		#		exit 0
		#	fi
		#	sudo nmap --script-updatedb
		#else
		#	sudo nmap --script-updatedb
		#fi

		if [[ $(ls bing_key) != "bing_key" ]]; then #get the bing api key
			read -p "You need a bing api key. If you do not have one you can get one at https://datamarket.azure.com/dataset/bing/search$ Now please enter your api key: " key
			echo "$key" > bing_key
		fi

		if [[ -n $(uname -r | grep kali) ]]; then
			#check it we have the ipsearch.py script installed and setup the system
			updatedb
			if [[ -z $(locate ipsearch.py) ]]; then
				wget https://bitbucket.org/holiman/ipsearch/get/7df3ff286ba2.zip
				unzip 7df3ff286ba2.zip
				mkdir /usr/lib64/ipsearch
				mv holiman-ipsearch-7df3ff286ba2/ipsearch.py /usr/lib64/ipsearch/
				rm -r holiman-ipsearch-7df3ff286ba2
				ln -s /usr/lib64/ipsearch/ipsearch.py /usr/bin/ipsearch
				updatedb
			elif [[ ! -f /usr/bin/ipsearch ]]; then
				ln -s $(locate ipsearch.py) /usr/bin/ipsearch
			fi
		
			#Setup for EyeWitness
			if [[ -z $(ls /usr/share/eyewitness/EyeWitness.py) ]]; then
				sudo apt-get install eyewitness
			fi
		else
			launch --help
			#Manually add some stuff for gentoo later until then you should be smart enough to figure it out on your own if you're using Gentoo.
		fi
	else #Scan using IP's passed right on command line
		if [[ $1 =~ [0-9] || $2 =~ [0-9] || $1 =~ [a-z] || $2 =~ [a-z] ]]; then
			build_dir
			[[ $1 != "--nmap" ]] && scanallthethings $1 || scanallthethings $2
			eyewitness
			#screenshots
		else
			launch --help
		fi
	fi
}
BLD_RED=${txtbld}$(tput setaf 1) # red
BLD_TEA=${txtbld}$(tput setaf 6) # teal
TXT_RST=$(tput sgr0)             # Reset
launch $1 $2
fixallthethings
