#!/bin/bash

fixallthethings()
{
  ID=$(echo $USER)
  echo -e "\n" #Improve readability
  echo "Doing clean up"
  [[ -e nmap/all_hosts/msf/.nmap ]] && rm nmap/all_hosts/msf/.nmap
  [[ -e nmap/all_hosts/msf/.gnmap ]] && rm nmap/all_hosts/msf/.gnmap
  [[ -d nmap ]] && echo "Setting permissions back to user"; sudo chown -R $ID:$ID nmap
  exit 0
}

trap fixallthethings INT HUP;

BtoC()
{
  START=0
  END=255
  for (( i=$START; i <= $END ; i++)); do
    if [[ $(expr length $i) -lt 255 ]]; then
      echo "${1}${i}.0/24" >> ips
    fi
  done
}

phase_parse()
{

  while IFS=$'\n' read -r line; do
    host0=$(echo "$line" | grep -e report | awk -F'for ' '{print $2}')
    host1=$(echo "$line" | grep -e [0-9]/ | grep open)
    [[ -n "$host0" ]] && echo -e "\n${BLD_RED}${host0}${TXT_RST}"; host0=""
    [[ -z "$host0" && -n "$host1" ]] && echo "${BLD_TEA}${host1}${TXT_RST}"
  done < nmap/all_hosts/results
  exit 0
}

nbt()
{
  echo "fuck"
  while read -r line; do
    [[ -n "$line" ]] && sudo nbtscan -r "$line"
  done < <(grep "/" ips)
}

discovery() #Process string for discovering if whe use file ips or if an ip set was passed as $2 on the CLI
{
  if [[ -z $1 ]]; then
    nmap -sn -iL ips | grep -i report | awk -F"for" '{ print $2 }' | cut -d' ' -f2 >> nmap/all_hosts/all_hosts
  else
    echo -e "scanning $1\n"
    nmap -sn $1 | grep -i report | awk -F"for" '{ print $2 }' | cut -d' ' -f2 >> nmap/all_hosts/all_hosts
  fi
}

nessus()  #Serve dual functions to build safe Nessus list or build parallelizable list for nmap
{
  #[[ ! -f nmap/all_hosts/all_hosts ]] && echo "No discovery of hosts has been performed. Nothing to do."; exit 1
  if [[ ! -e nmap/Nessus ]]; then
    while IFS=$'\n' read -r host
    do
      if [[ -z $(grep "$host" exclude) ]]; then #Is this ip in our range off limits?
        echo "$host" >> nmap/Nessus #ip is safe
      else
        echo "Skipping $host"
      fi
    done < nmap/all_hosts/all_hosts
  else
    echo "Nessus ready file already exists!"
    exit 0
  fi
  [[ -z $1 ]] && cat nmap/Nessus || mv nmap/Nessus nmap/safe_ips #build parallelizable list for nmap
}

nikto()
{
  while IFS=$'\n' read -r host; do nikto -p 80,443 -h "${host}"; done <<< nmap/safe_ips >> nikto 2>&1
}

scanallthethings()
{
  [[ $2 != "-f" ]] && file="ips" || file="nmap/safe_ips"
  ips=""
  while IFS= read -r host; do
    ips="${ips}${host} "
  done < $file

  if [[ $1 != "-f" ]]; then
    sudo nmap ${NMAP_VAL} ${ips}-oA nmap/all_hosts/msf/ >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
  else
    sudo nmap ${NMAP_VAL} ${ips}-oA nmap/all_hosts/msf/ >> nmap/all_hosts/results #Scan the ip, drop results into file nmap/all_hosts/$host and the MSF file into nmap/all_hosts/msf/$host
  fi
  echo -e "\n" #Improve readability
  cat nmap/all_hosts/results #here are the goods so that you have a working status quo in the terminal during the progress.
}

launch()
{
  [[ ! -e exclude ]] && touch exclude #prevent the following line from returning bits if file exclude does not exist
  [[ ! -d nmap ]] && mkdir nmap
  [[ ! -d nmap/all_hosts ]] && mkdir nmap/all_hosts
  [[ ! -e nmap/all_hosts/all_hosts ]] && touch nmap/all_hosts/all_hosts
  [[ ! -d nmap/all_hosts/msf ]] &&  mkdir nmap/all_hosts/msf
  [[ $2 == "--nmap" || $1 == "--nmap" ]] && read -p "What nmap variables would you like to scan with? e.g. -sS -sV" NMAP_VAL || NMAP_VAL="-A"
  if [[ -z $1 || $1 == "--help" || $1 == "-h" ]]; then
    echo -e "Useage Commands are switch [-f -d -ff -df -bc --p --nbt --nessus ] flag [ --nmap ] [IP]/[CID]\n"
    echo -e "-bc To convert a class B range to a scannable block of C's use option -bc ip (example: ./Phase_Blaster -bc 127.0.)\n"
    echo -e "-f To scan from a file named ips place all ips, and ip ranges to be scanned in a text file named \"ips\" separated by line breaks (example: ./Phase_Blaster -f)\n"
    echo -e "-df Command -df performs a complete ping sweep, creates a file of all live hosts and then nmap scans each of them\nwhile tallying results into individual files by ip's and creates a msf folder with msf importable .xml results.\n"
    echo -e "-d & -ff Using options -d & -ff are done so by enabling the user the ability of running just a discovery scan with -d and\nthen having the option to go back at a later date and run -ff for a comprehensive scan overview of the -d results.\n"
    echo -e "You may also call Phase_Blaster with a single IP or CID and have them enumerated at any point in the same method -f worked. \n(example: ./Phase_Blaster 127.0.0.0 or ./Phase_Blaster 127.0.0.0/24) or just do a discovery by adding -d"
    echo -e "Use --nmap as the second argument or the first for direct host scanning to run nmap with custom flags. User is prompted with an input function (exampln: ./Phase_Blaster -df --nmap or ./Phase_Blaster --nmap 127.0.0.0"
    echo "The following commands are used independantly"
#    echo -e "--p to parse the nmap output into readable format"
    echo -e "--npt to run a netbios host discovery against the ips file"
    echo -e "--nessus to generate an import file of only approved IP addressed from a host discovery for nessus scanning"
    echo -e "Use --nikto to run nikto on ports 80,443 for hosts in the safe_ip list. In other words only on hosts that have been validated alive and in scope"
  elif [[ $1 == "-bc" ]]; then
    BtoC $2
  elif [[ $1 == "-f" ]]; then # Add the function to use ip's submitted via CLI back in and not just the IPS file
      scanallthethings -f
  elif [[ $1 == "-d" ]]; then
    if [[ -z $2 && $2 != "--nmap" ]]; then
      discovery
      cat nmap/all_hosts/all_hosts
    elif [[ $2 == "--nmap" ]]; then
      echo "You can't specify --nmap for -d"
      exit 1
    else
      [[ $2 == [0-9] ]] && discovery $2; cat nmap/all_hosts/all_hosts
    fi
  elif [[ $1 == "-df" || $1 == "-fd"  ]]; then
    discovery
    nessus build
    scanallthethings
  elif [[ $1 == "-ff" ]]; then
    nessus build
    scanallthethings
  elif [[ $1 == "--p" ]]; then
    phase_parse
  elif [[ $1 == "--nbt" ]]; then
    nbt
  elif [[ $1 == "--nessus" ]]; then
    nessus
  elif [[ $1 == "--nikto" ]]; then
    nikto
  else
    if [[ $1 == [0-9] || $2 == [0-9] ]]; then
      [[ $1 != "--nmap" ]] && discovery $1 || discovery $2
      nessus build
      scanallthethings
    fi
  fi
}
BLD_RED=${txtbld}$(tput setaf 1) # red
BLD_TEA=${txtbld}$(tput setaf 6) # teal
TXT_RST=$(tput sgr0)             # Reset
launch $1 $2
fixallthethings
